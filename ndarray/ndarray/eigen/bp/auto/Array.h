// -*- c++ -*-
/*
 * Copyright (c) 2010-2012, Jim Bosch
 * All rights reserved.
 *
 * ndarray is distributed under a simple BSD-like license;
 * see the LICENSE file that should be present in the root
 * of the source distribution, or alternately available at:
 * https://github.com/ndarray/ndarray
 */
// THIS FILE IS MACHINE GENERATED BY SCONS. DO NOT EDIT MANUALLY.
#ifndef NDARRAY_EIGEN_BP_AUTO_Array_h_INCLUDED
#define NDARRAY_EIGEN_BP_AUTO_Array_h_INCLUDED

#include "boost/numpy.hpp"
#include "ndarray/eigen/bp/Array.h"


namespace boost { namespace python {

template <typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct to_python_value< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const & > : public detail::builtin_to_python {
    inline PyObject * operator()(Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const & x) const {
        object result = ndarray::ToBoostPython< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> >::apply(x);
        Py_INCREF(result.ptr());
        return result.ptr();
    }
    inline PyTypeObject const * get_pytype() const {
        return converter::object_manager_traits<
            typename ndarray::ToBoostPython< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> >::result_type
        >::get_pytype();
    }
};

template <typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct to_python_value< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> & > : public detail::builtin_to_python {
    inline PyObject * operator()(Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> & x) const {
        object result = ndarray::ToBoostPython< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> >::apply(x);
        Py_INCREF(result.ptr());
        return result.ptr();
    }
    inline PyTypeObject const * get_pytype() const {
        return converter::object_manager_traits<
            typename ndarray::ToBoostPython< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> >::result_type
        >::get_pytype();
    }
};

namespace converter {

template <typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct arg_to_python< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> > : public handle<> {
    inline arg_to_python(Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const & v) :
        handle<>(to_python_value<Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const &>()(v)) {}
};

template <typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct arg_rvalue_from_python< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const & > {
    typedef Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> result_type;
    arg_rvalue_from_python(PyObject * p) :
        _converter(boost::python::object(boost::python::handle<>(boost::python::borrowed(p)))) {}
    bool convertible() const { return _converter.convertible(); }
    result_type operator()() const { return _converter(); }
private:
    mutable ndarray::FromBoostPython< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> > _converter;
};

template <typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct arg_rvalue_from_python< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> > : public arg_rvalue_from_python< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const &> {
    arg_rvalue_from_python(PyObject * p) : arg_rvalue_from_python< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const & >(p) {}
};

template <typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct arg_rvalue_from_python< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const > : public arg_rvalue_from_python< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const &> {
    arg_rvalue_from_python(PyObject * p) : arg_rvalue_from_python< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> const & >(p) {}
};

template <typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct extract_rvalue< Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> > : private noncopyable {
    typedef Eigen::Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> result_type;
    extract_rvalue(PyObject * x) : m_converter(x) {}
    bool check() const { return m_converter.convertible(); }
    result_type operator()() const { return m_converter(); }
private:
    arg_rvalue_from_python< result_type const & > m_converter;
};

}}} // namespace boost::python::converter

#endif // !NDARRAY_EIGEN_BP_AUTO_Array_h_INCLUDED
